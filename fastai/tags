!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.9~svn20110310	//
AdaptiveConcatPool2d	layers.py	/^class AdaptiveConcatPool2d(nn.Module):$/;"	c
ArraysDataset	dataset.py	/^class ArraysDataset(BaseDataset):$/;"	c
ArraysIndexDataset	dataset.py	/^class ArraysIndexDataset(ArraysDataset):$/;"	c
ArraysNhotDataset	dataset.py	/^class ArraysNhotDataset(ArraysDataset):$/;"	c
BOW_Dataset	nlp.py	/^class BOW_Dataset(Dataset):$/;"	c
BOW_Learner	nlp.py	/^class BOW_Learner(Learner):$/;"	c
BaseDataset	dataset.py	/^class BaseDataset(Dataset):$/;"	c
BasicConv2d	models/inceptionresnetv2.py	/^class BasicConv2d(nn.Module):$/;"	c
BasicConv2d	models/inceptionv4.py	/^class BasicConv2d(nn.Module):$/;"	c
BasicModel	learner.py	/^class BasicModel():$/;"	c
Block17	models/inceptionresnetv2.py	/^class Block17(nn.Module):$/;"	c
Block35	models/inceptionresnetv2.py	/^class Block35(nn.Module):$/;"	c
Block8	models/inceptionresnetv2.py	/^class Block8(nn.Module):$/;"	c
CENTER	transforms.py	/^    CENTER = 2$/;"	v	class:CropType
COORD	transforms.py	/^    COORD = 3$/;"	v	class:TfmType
Callback	sgdr.py	/^class Callback:$/;"	c
CenterCrop	transforms.py	/^def CenterCrop(min_sz=None): return lambda x: center_crop(x, min_sz)$/;"	f
CenterCropXY	transforms.py	/^class CenterCropXY(CoordTransform):$/;"	c
CollabFilterDataset	column_data.py	/^class CollabFilterDataset(Dataset):$/;"	c
CollabFilterLearner	column_data.py	/^class CollabFilterLearner(Learner):$/;"	c
CollabFilterModel	column_data.py	/^class CollabFilterModel(BasicModel):$/;"	c
ColumnarDataset	column_data.py	/^class ColumnarDataset(Dataset):$/;"	c
ColumnarModelData	column_data.py	/^class ColumnarModelData(ModelData):$/;"	c
ConcatTextDataset	nlp.py	/^class ConcatTextDataset(torchtext.data.Dataset):$/;"	c
ConvLearner	conv_learner.py	/^class ConvLearner(Learner):$/;"	c
ConvnetBuilder	conv_learner.py	/^class ConvnetBuilder():$/;"	c
CoordTransform	transforms.py	/^class CoordTransform(Transform):$/;"	c
CosAnneal	sgdr.py	/^class CosAnneal(LR_Updater):$/;"	c
CropType	transforms.py	/^class CropType(IntEnum):$/;"	c
Denormalize	transforms.py	/^class Denormalize():$/;"	c
DotProdNB	nlp.py	/^class DotProdNB(nn.Module):$/;"	c
EmbeddingDotBias	column_data.py	/^class EmbeddingDotBias(nn.Module):$/;"	c
FilesArrayDataset	dataset.py	/^class FilesArrayDataset(FilesDataset):$/;"	c
FilesDataset	dataset.py	/^class FilesDataset(BaseDataset):$/;"	c
FilesIndexArrayDataset	dataset.py	/^class FilesIndexArrayDataset(FilesArrayDataset):$/;"	c
FilesIndexArrayRegressionDataset	dataset.py	/^class FilesIndexArrayRegressionDataset(FilesArrayDataset):$/;"	c
FilesNhotArrayDataset	dataset.py	/^class FilesNhotArrayDataset(FilesArrayDataset):$/;"	c
Flatten	layers.py	/^class Flatten(nn.Module):$/;"	c
ImageClassifierData	dataset.py	/^class ImageClassifierData(ImageData):$/;"	c
ImageData	dataset.py	/^class ImageData(ModelData):$/;"	c
InceptionResnetV2	models/inceptionresnetv2.py	/^class InceptionResnetV2(nn.Module):$/;"	c
InceptionV4	models/inceptionv4.py	/^class InceptionV4(nn.Module):$/;"	c
Inception_A	models/inceptionv4.py	/^class Inception_A(nn.Module):$/;"	c
Inception_B	models/inceptionv4.py	/^class Inception_B(nn.Module):$/;"	c
Inception_C	models/inceptionv4.py	/^class Inception_C(nn.Module):$/;"	c
LR_Finder	sgdr.py	/^class LR_Finder(LR_Updater):$/;"	c
LR_Updater	sgdr.py	/^class LR_Updater(LossRecorder):$/;"	c
Lambda	layers.py	/^class Lambda(nn.Module):$/;"	c
Lambda	models/convert_torch.py	/^class Lambda(LambdaBase):$/;"	c
Lambda	models/resnext_101_32x4d.py	/^class Lambda(LambdaBase):$/;"	c
Lambda	models/resnext_101_64x4d.py	/^class Lambda(LambdaBase):$/;"	c
Lambda	models/resnext_50_32x4d.py	/^class Lambda(LambdaBase):$/;"	c
Lambda	models/wrn_50_2f.py	/^class Lambda(LambdaBase):$/;"	c
LambdaBase	models/convert_torch.py	/^class LambdaBase(nn.Sequential):$/;"	c
LambdaBase	models/resnext_101_32x4d.py	/^class LambdaBase(nn.Sequential):$/;"	c
LambdaBase	models/resnext_101_64x4d.py	/^class LambdaBase(nn.Sequential):$/;"	c
LambdaBase	models/resnext_50_32x4d.py	/^class LambdaBase(nn.Sequential):$/;"	c
LambdaBase	models/wrn_50_2f.py	/^class LambdaBase(nn.Sequential):$/;"	c
LambdaMap	models/convert_torch.py	/^class LambdaMap(LambdaBase):$/;"	c
LambdaMap	models/resnext_101_32x4d.py	/^class LambdaMap(LambdaBase):$/;"	c
LambdaMap	models/resnext_101_64x4d.py	/^class LambdaMap(LambdaBase):$/;"	c
LambdaMap	models/resnext_50_32x4d.py	/^class LambdaMap(LambdaBase):$/;"	c
LambdaMap	models/wrn_50_2f.py	/^class LambdaMap(LambdaBase):$/;"	c
LambdaReduce	models/convert_torch.py	/^class LambdaReduce(LambdaBase):$/;"	c
LambdaReduce	models/resnext_101_32x4d.py	/^class LambdaReduce(LambdaBase):$/;"	c
LambdaReduce	models/resnext_101_64x4d.py	/^class LambdaReduce(LambdaBase):$/;"	c
LambdaReduce	models/resnext_50_32x4d.py	/^class LambdaReduce(LambdaBase):$/;"	c
LambdaReduce	models/wrn_50_2f.py	/^class LambdaReduce(LambdaBase):$/;"	c
LanguageModelData	nlp.py	/^class LanguageModelData():$/;"	c
LanguageModelLoader	nlp.py	/^class LanguageModelLoader():$/;"	c
LayerOptimizer	layer_optimizer.py	/^class LayerOptimizer():$/;"	c
Learner	learner.py	/^class Learner():$/;"	c
LinearDecoder	lm_rnn.py	/^class LinearDecoder(LinearRNNOutput):$/;"	c
LinearRNNOutput	lm_rnn.py	/^class LinearRNNOutput(nn.Module):$/;"	c
LockedDropout	rnn_reg.py	/^class LockedDropout(nn.Module):$/;"	c
LossRecorder	sgdr.py	/^class LossRecorder(Callback):$/;"	c
MixIterator	utils.py	/^class MixIterator(object):$/;"	c
MixedInputModel	column_data.py	/^class MixedInputModel(nn.Module):$/;"	c
Mixed_3a	models/inceptionv4.py	/^class Mixed_3a(nn.Module):$/;"	c
Mixed_4a	models/inceptionv4.py	/^class Mixed_4a(nn.Module):$/;"	c
Mixed_5a	models/inceptionv4.py	/^class Mixed_5a(nn.Module):$/;"	c
Mixed_5b	models/inceptionresnetv2.py	/^class Mixed_5b(nn.Module):$/;"	c
Mixed_6a	models/inceptionresnetv2.py	/^class Mixed_6a(nn.Module):$/;"	c
Mixed_7a	models/inceptionresnetv2.py	/^class Mixed_7a(nn.Module):$/;"	c
ModelData	dataset.py	/^class ModelData():$/;"	c
ModelDataLoader	dataset.py	/^class ModelDataLoader():$/;"	c
MultiBatchRNN	lm_rnn.py	/^class MultiBatchRNN(RNN_Encoder):$/;"	c
NO	transforms.py	/^    NO = 1$/;"	v	class:TfmType
NO	transforms.py	/^    NO = 3$/;"	v	class:CropType
NoCrop	transforms.py	/^def NoCrop(min_sz=None): return lambda x: no_crop(x, min_sz)$/;"	f
NoCropXY	transforms.py	/^class NoCropXY(CoordTransform):$/;"	c
Normalize	transforms.py	/^class Normalize():$/;"	c
PIXEL	transforms.py	/^    PIXEL = 2$/;"	v	class:TfmType
PoolingLinearClassifier	lm_rnn.py	/^class PoolingLinearClassifier(LinearRNNOutput):$/;"	c
RANDOM	transforms.py	/^    RANDOM = 1$/;"	v	class:CropType
RNN_Encoder	lm_rnn.py	/^class RNN_Encoder(nn.Module):$/;"	c
RNN_Learner	nlp.py	/^class RNN_Learner(Learner):$/;"	c
RandomCrop	transforms.py	/^class RandomCrop():$/;"	c
RandomCropXY	transforms.py	/^class RandomCropXY(CoordTransform):$/;"	c
RandomDihedral	transforms.py	/^class RandomDihedral():$/;"	c
RandomDihedralXY	transforms.py	/^class RandomDihedralXY(CoordTransform):$/;"	c
RandomFlip	transforms.py	/^def RandomFlip(): return lambda x: x if random.random()<0.5 else np.fliplr(x).copy()$/;"	f
RandomFlipXY	transforms.py	/^class RandomFlipXY(CoordTransform):$/;"	c
RandomLighting	transforms.py	/^class RandomLighting():$/;"	c
RandomLightingXY	transforms.py	/^class RandomLightingXY(Transform):$/;"	c
RandomRotate	transforms.py	/^class RandomRotate():$/;"	c
RandomRotateXY	transforms.py	/^class RandomRotateXY(Transform):$/;"	c
RandomRotateZoom	transforms.py	/^class RandomRotateZoom():$/;"	c
RandomScale	transforms.py	/^class RandomScale():$/;"	c
RandomScaleXY	transforms.py	/^class RandomScaleXY(CoordTransform):$/;"	c
Reduction_A	models/inceptionv4.py	/^class Reduction_A(nn.Module):$/;"	c
Reduction_B	models/inceptionv4.py	/^class Reduction_B(nn.Module):$/;"	c
ReflectionPad	transforms.py	/^class ReflectionPad():$/;"	c
SGD_Momentum	core.py	/^def SGD_Momentum(momentum):$/;"	f
Scale	transforms.py	/^def Scale(sz): return lambda x: scale_min(x, sz)$/;"	f
ScaleXY	transforms.py	/^class ScaleXY(CoordTransform):$/;"	c
SequentialRNN	lm_rnn.py	/^class SequentialRNN(nn.Sequential):$/;"	c
SimpleNB	nlp.py	/^class SimpleNB(nn.Module):$/;"	c
SingleModel	learner.py	/^class SingleModel(BasicModel):$/;"	c
Stepper	model.py	/^class Stepper():$/;"	c
StructuredLearner	column_data.py	/^class StructuredLearner(Learner):$/;"	c
StructuredModel	column_data.py	/^class StructuredModel(BasicModel):$/;"	c
T	core.py	/^def T(a):$/;"	f
TTA	learner.py	/^    def TTA(self, n_aug=4, is_test=False):$/;"	m	class:Learner
TextClassifierData	nlp.py	/^class TextClassifierData(ModelData):$/;"	c
TextData	nlp.py	/^class TextData(ModelData):$/;"	c
TextDataLoader	nlp.py	/^class TextDataLoader():$/;"	c
TextModel	nlp.py	/^class TextModel(BasicModel):$/;"	c
TfmType	transforms.py	/^class TfmType(IntEnum):$/;"	c
TqdmUpTo	io.py	/^class TqdmUpTo(tqdm):$/;"	c
Transform	transforms.py	/^class Transform():$/;"	c
Transforms	transforms.py	/^class Transforms():$/;"	c
V	core.py	/^def V(x):   return [V_(o) for o in x] if isinstance(x,list) else V_(x)$/;"	f
VV	core.py	/^def VV(x):  return [VV_(o) for o in x] if isinstance(x,list) else VV_(x)$/;"	f
VV_	core.py	/^def VV_(x): return x.cuda(async=True) if isinstance(x, Variable) else Variable(x.cuda(async=True), volatile=True)$/;"	f
V_	core.py	/^def V_(x):  return x.cuda(async=True) if isinstance(x, Variable) else Variable(x.cuda(async=True))$/;"	f
WeightDrop	rnn_reg.py	/^class WeightDrop(torch.nn.Module):$/;"	c
__call__	transforms.py	/^    def __call__(self, im, y): return compose(im, y, self.tfms)$/;"	m	class:Transforms	file:
__call__	transforms.py	/^    def __call__(self, x): return x*self.s+self.m$/;"	m	class:Denormalize	file:
__call__	transforms.py	/^    def __call__(self, x):$/;"	m	class:RandomCrop	file:
__call__	transforms.py	/^    def __call__(self, x):$/;"	m	class:RandomDihedral	file:
__call__	transforms.py	/^    def __call__(self, x):$/;"	m	class:RandomScale	file:
__call__	transforms.py	/^    def __call__(self, x, y): return (x-self.m)\/self.s, y$/;"	m	class:Normalize	file:
__call__	transforms.py	/^    def __call__(self, x, y):$/;"	m	class:Transform	file:
__call__	transforms.py	/^    def __call__(self, x, y=None):$/;"	m	class:RandomLighting	file:
__call__	transforms.py	/^    def __call__(self, x, y=None):$/;"	m	class:RandomRotate	file:
__call__	transforms.py	/^    def __call__(self, x, y=None):$/;"	m	class:RandomRotateZoom	file:
__call__	transforms.py	/^    def __call__(self, x, y=None):$/;"	m	class:ReflectionPad	file:
__getitem__	column_data.py	/^    def __getitem__(self, idx): return [o[idx] for o in self.cols]$/;"	m	class:CollabFilterDataset	file:
__getitem__	column_data.py	/^    def __getitem__(self, idx): return [self.cats[idx], self.conts[idx], self.y[idx]]$/;"	m	class:ColumnarDataset	file:
__getitem__	dataset.py	/^    def __getitem__(self, idx):$/;"	m	class:BaseDataset	file:
__getitem__	learner.py	/^    def __getitem__(self,i): return self.children[i]$/;"	m	class:Learner	file:
__getitem__	nlp.py	/^    def __getitem__(self,i):$/;"	m	class:BOW_Dataset	file:
__init__	column_data.py	/^    def __init__(self, cats, conts, y):$/;"	m	class:ColumnarDataset
__init__	column_data.py	/^    def __init__(self, data, models, **kwargs):$/;"	m	class:CollabFilterLearner
__init__	column_data.py	/^    def __init__(self, data, models, **kwargs):$/;"	m	class:StructuredLearner
__init__	column_data.py	/^    def __init__(self, emb_szs, n_cont, emb_drop, out_sz, szs, drops,$/;"	m	class:MixedInputModel
__init__	column_data.py	/^    def __init__(self, n_factors, n_users, n_items, min_score, max_score):$/;"	m	class:EmbeddingDotBias
__init__	column_data.py	/^    def __init__(self, path, trn_ds, val_ds, bs):$/;"	m	class:ColumnarModelData
__init__	column_data.py	/^    def __init__(self, path, user_col, item_col, ratings):$/;"	m	class:CollabFilterDataset
__init__	conv_learner.py	/^    def __init__(self, data, models, precompute=False, **kwargs):$/;"	m	class:ConvLearner
__init__	conv_learner.py	/^    def __init__(self, f, c, is_multi, is_reg, ps=None, xtra_fc=None, xtra_cut=0):$/;"	m	class:ConvnetBuilder
__init__	dataset.py	/^    def __init__(self, dl): self.dl=dl$/;"	m	class:ModelDataLoader
__init__	dataset.py	/^    def __init__(self, fnames, transform, path):$/;"	m	class:FilesDataset
__init__	dataset.py	/^    def __init__(self, fnames, y, transform, path):$/;"	m	class:FilesArrayDataset
__init__	dataset.py	/^    def __init__(self, path, datasets, bs, num_workers, classes):$/;"	m	class:ImageData
__init__	dataset.py	/^    def __init__(self, path, trn_dl, val_dl, test_dl=None):$/;"	m	class:ModelData
__init__	dataset.py	/^    def __init__(self, transform=None):$/;"	m	class:BaseDataset
__init__	dataset.py	/^    def __init__(self, x, y, transform):$/;"	m	class:ArraysDataset
__init__	layer_optimizer.py	/^    def __init__(self, opt_fn, layer_groups, lrs, wds=None):$/;"	m	class:LayerOptimizer
__init__	layers.py	/^    def __init__(self): super().__init__()$/;"	m	class:Flatten
__init__	layers.py	/^    def __init__(self, f): super().__init__(); self.f=f$/;"	m	class:Lambda
__init__	layers.py	/^    def __init__(self, sz=None):$/;"	m	class:AdaptiveConcatPool2d
__init__	learner.py	/^    def __init__(self, data, models, opt_fn=None, tmp_name='tmp', models_name='models', metrics=None):$/;"	m	class:Learner
__init__	learner.py	/^    def __init__(self,model): self.model=model$/;"	m	class:BasicModel
__init__	lm_rnn.py	/^    def __init__(self, bs, ntoken, emb_sz, nhid, nlayers, pad_token,$/;"	m	class:RNN_Encoder
__init__	lm_rnn.py	/^    def __init__(self, max_sl, bptt, *args, **kwargs):$/;"	m	class:MultiBatchRNN
__init__	lm_rnn.py	/^    def __init__(self, n_out, nhid, dropout):$/;"	m	class:LinearRNNOutput
__init__	lm_rnn.py	/^    def __init__(self, n_out, nhid, dropout, tie_encoder=None):$/;"	m	class:LinearDecoder
__init__	model.py	/^    def __init__(self, m, opt, crit, clip=0, reg_fn=None):$/;"	m	class:Stepper
__init__	models/convert_torch.py	/^    def __init__(self, fn, *args):$/;"	m	class:LambdaBase
__init__	models/inceptionresnetv2.py	/^    def __init__(self):$/;"	m	class:Mixed_5b
__init__	models/inceptionresnetv2.py	/^    def __init__(self):$/;"	m	class:Mixed_6a
__init__	models/inceptionresnetv2.py	/^    def __init__(self):$/;"	m	class:Mixed_7a
__init__	models/inceptionresnetv2.py	/^    def __init__(self, in_planes, out_planes, kernel_size, stride, padding=0):$/;"	m	class:BasicConv2d
__init__	models/inceptionresnetv2.py	/^    def __init__(self, num_classes=1001):$/;"	m	class:InceptionResnetV2
__init__	models/inceptionresnetv2.py	/^    def __init__(self, scale=1.0):$/;"	m	class:Block17
__init__	models/inceptionresnetv2.py	/^    def __init__(self, scale=1.0):$/;"	m	class:Block35
__init__	models/inceptionresnetv2.py	/^    def __init__(self, scale=1.0, noReLU=False):$/;"	m	class:Block8
__init__	models/inceptionv4.py	/^    def __init__(self):$/;"	m	class:Inception_A
__init__	models/inceptionv4.py	/^    def __init__(self):$/;"	m	class:Inception_B
__init__	models/inceptionv4.py	/^    def __init__(self):$/;"	m	class:Inception_C
__init__	models/inceptionv4.py	/^    def __init__(self):$/;"	m	class:Mixed_3a
__init__	models/inceptionv4.py	/^    def __init__(self):$/;"	m	class:Mixed_4a
__init__	models/inceptionv4.py	/^    def __init__(self):$/;"	m	class:Mixed_5a
__init__	models/inceptionv4.py	/^    def __init__(self):$/;"	m	class:Reduction_A
__init__	models/inceptionv4.py	/^    def __init__(self):$/;"	m	class:Reduction_B
__init__	models/inceptionv4.py	/^    def __init__(self, in_planes, out_planes, kernel_size, stride, padding=0):$/;"	m	class:BasicConv2d
__init__	models/inceptionv4.py	/^    def __init__(self, num_classes=1001):$/;"	m	class:InceptionV4
__init__	models/resnext_101_32x4d.py	/^    def __init__(self, fn, *args):$/;"	m	class:LambdaBase
__init__	models/resnext_101_64x4d.py	/^    def __init__(self, fn, *args):$/;"	m	class:LambdaBase
__init__	models/resnext_50_32x4d.py	/^    def __init__(self, fn, *args):$/;"	m	class:LambdaBase
__init__	models/wrn_50_2f.py	/^    def __init__(self, fn, *args):$/;"	m	class:LambdaBase
__init__	nlp.py	/^    def __init__(self, bow, y, max_len):$/;"	m	class:BOW_Dataset
__init__	nlp.py	/^    def __init__(self, data, models, **kwargs):$/;"	m	class:BOW_Learner
__init__	nlp.py	/^    def __init__(self, data, models, **kwargs):$/;"	m	class:RNN_Learner
__init__	nlp.py	/^    def __init__(self, ds, bs, bptt):$/;"	m	class:LanguageModelLoader
__init__	nlp.py	/^    def __init__(self, nf, ny):$/;"	m	class:SimpleNB
__init__	nlp.py	/^    def __init__(self, nf, ny, w_adj=0.4, r_adj=10):$/;"	m	class:DotProdNB
__init__	nlp.py	/^    def __init__(self, path, field, train, validation, test=None, bs=64, bptt=70, **kwargs):$/;"	m	class:LanguageModelData
__init__	nlp.py	/^    def __init__(self, path, text_field, newline_eos=True, **kwargs):$/;"	m	class:ConcatTextDataset
__init__	nlp.py	/^    def __init__(self, src, x_fld, y_fld):$/;"	m	class:TextDataLoader
__init__	rnn_reg.py	/^    def __init__(self, module, dropout, weights=['weight_hh_l0']):$/;"	m	class:WeightDrop
__init__	rnn_reg.py	/^    def __init__(self, p=0.5):$/;"	m	class:LockedDropout
__init__	sgdr.py	/^    def __init__(self, layer_opt):$/;"	m	class:LossRecorder
__init__	sgdr.py	/^    def __init__(self, layer_opt, nb, end_lr=10):$/;"	m	class:LR_Finder
__init__	sgdr.py	/^    def __init__(self, layer_opt, nb, on_cycle_end=None, cycle_mult=1):$/;"	m	class:CosAnneal
__init__	transforms.py	/^    def __init__(self, b, c): self.b,self.c = b,c$/;"	m	class:RandomLighting
__init__	transforms.py	/^    def __init__(self, b, c, tfm_y=TfmType.NO):$/;"	m	class:RandomLightingXY
__init__	transforms.py	/^    def __init__(self, deg, p=0.75, mode=cv2.BORDER_REFLECT):$/;"	m	class:RandomRotate
__init__	transforms.py	/^    def __init__(self, deg, p=0.75, mode=cv2.BORDER_REFLECT, tfm_y=TfmType.NO):$/;"	m	class:RandomRotateXY
__init__	transforms.py	/^    def __init__(self, deg, zoom, stretch, mode=cv2.BORDER_REFLECT):$/;"	m	class:RandomRotateZoom
__init__	transforms.py	/^    def __init__(self, m, s):$/;"	m	class:Denormalize
__init__	transforms.py	/^    def __init__(self, m, s):$/;"	m	class:Normalize
__init__	transforms.py	/^    def __init__(self, pad, mode=cv2.BORDER_REFLECT):$/;"	m	class:ReflectionPad
__init__	transforms.py	/^    def __init__(self, sz, max_zoom, p=0.75, tfm_y=TfmType.NO):$/;"	m	class:RandomScaleXY
__init__	transforms.py	/^    def __init__(self, sz, tfm_y=TfmType.NO):$/;"	m	class:CenterCropXY
__init__	transforms.py	/^    def __init__(self, sz, tfm_y=TfmType.NO):$/;"	m	class:NoCropXY
__init__	transforms.py	/^    def __init__(self, sz, tfm_y=TfmType.NO):$/;"	m	class:ScaleXY
__init__	transforms.py	/^    def __init__(self, sz, tfms, denorm, crop_type=CropType.CENTER, tfm_y=TfmType.NO):$/;"	m	class:Transforms
__init__	transforms.py	/^    def __init__(self, targ): self.targ = targ$/;"	m	class:RandomCrop
__init__	transforms.py	/^    def __init__(self, targ, max_zoom, p=0.75):$/;"	m	class:RandomScale
__init__	transforms.py	/^    def __init__(self, targ, tfm_y=TfmType.NO):$/;"	m	class:RandomCropXY
__init__	transforms.py	/^    def __init__(self, tfm_y=TfmType.NO): self.tfm_y=tfm_y$/;"	m	class:Transform
__init__	utils.py	/^    def __init__(self, iters):$/;"	m	class:MixIterator
__init__.py	__init__.py	1;"	F
__iter__	dataset.py	/^    def __iter__(self):$/;"	m	class:ModelDataLoader	file:
__iter__	nlp.py	/^    def __iter__(self):$/;"	m	class:LanguageModelLoader	file:
__iter__	nlp.py	/^    def __iter__(self):$/;"	m	class:TextDataLoader	file:
__iter__	utils.py	/^    def __iter__(self):$/;"	m	class:MixIterator	file:
__len__	column_data.py	/^    def __len__(self): return len(self.y)$/;"	m	class:ColumnarDataset	file:
__len__	column_data.py	/^    def __len__(self): return self.n$/;"	m	class:CollabFilterDataset	file:
__len__	dataset.py	/^    def __len__(self): return len(self.dl)$/;"	m	class:ModelDataLoader	file:
__len__	dataset.py	/^    def __len__(self): return self.n$/;"	m	class:BaseDataset	file:
__len__	nlp.py	/^    def __len__(self): return len(self.bow.indptr)-1$/;"	m	class:BOW_Dataset	file:
__len__	nlp.py	/^    def __len__(self): return len(self.src)-1$/;"	m	class:TextDataLoader	file:
__len__	nlp.py	/^    def __len__(self): return self.n \/\/ self.bptt - 1$/;"	m	class:LanguageModelLoader	file:
__next__	dataset.py	/^    def __next__(self):$/;"	m	class:ModelDataLoader	file:
__next__	nlp.py	/^    def __next__(self):$/;"	m	class:LanguageModelLoader	file:
_setup	rnn_reg.py	/^    def _setup(self):$/;"	m	class:WeightDrop
_setweights	rnn_reg.py	/^    def _setweights(self):$/;"	m	class:WeightDrop
accuracy	metrics.py	/^def accuracy(preds, targs):$/;"	f
accuracy_multi	metrics.py	/^def accuracy_multi(preds, targs, thresh):$/;"	f
accuracy_thresh	metrics.py	/^def accuracy_thresh(thresh):$/;"	f
add_datepart	structured.py	/^def add_datepart(df, fldname):$/;"	f
add_pad	transforms.py	/^    def add_pad(self, img):$/;"	m	class:ReflectionPad
add_submodule	models/convert_torch.py	/^def add_submodule(seq, *args):$/;"	f
apply_cats	structured.py	/^def apply_cats(df, trn):$/;"	f
apply_init	initializers.py	/^def apply_init(m, init_fn):$/;"	f
apply_leaf	core.py	/^def apply_leaf(m, f):$/;"	f
args	models/convert_torch.py	/^args = parser.parse_args()$/;"	v
batchify	nlp.py	/^    def batchify(self, data):$/;"	m	class:LanguageModelLoader
c	dataset.py	/^    def c(self): return self.trn_ds.c$/;"	m	class:ImageData
c	nlp.py	/^    def c(self): return self.trn_ds.c$/;"	m	class:TextClassifierData
calc_lr	sgdr.py	/^    def calc_lr(self, init_lrs): raise NotImplementedError$/;"	m	class:LR_Updater
calc_lr	sgdr.py	/^    def calc_lr(self, init_lrs): return init_lrs * (self.lr_mult**self.iteration)$/;"	m	class:LR_Finder
calc_lr	sgdr.py	/^    def calc_lr(self, init_lrs):$/;"	m	class:CosAnneal
calc_r	nlp.py	/^def calc_r(y_i, x, y):$/;"	f
ceil	utils.py	/^def ceil(x): return int(math.ceil(x))$/;"	f
center_crop	transforms.py	/^def center_crop(im, min_sz=None):$/;"	f
chain_params	core.py	/^def chain_params(p):$/;"	f
channel_dim	transforms.py	/^def channel_dim(x, y): return np.rollaxis(x, 2), y$/;"	f
children	learner.py	/^    def children(self): return children(self.model)$/;"	m	class:Learner
children	torch_imports.py	/^def children(m): return list(m.children())$/;"	f
column_data.py	column_data.py	1;"	F
combine_date	structured.py	/^def combine_date(years, months=1, days=1, weeks=None, hours=None, minutes=None,$/;"	f
compose	transforms.py	/^def compose(im, y, fns):$/;"	f
concat	lm_rnn.py	/^    def concat(self, arrs):$/;"	m	class:MultiBatchRNN
cond_init	initializers.py	/^def cond_init(m, init_fn):$/;"	f
conv_dict	core.py	/^conv_dict = {np.dtype('int8'): torch.LongTensor, np.dtype('int16'): torch.LongTensor,$/;"	v
conv_learner.py	conv_learner.py	1;"	F
convert_torch.py	models/convert_torch.py	1;"	F
coords2px	transforms.py	/^def coords2px(y, x):$/;"	f
copy_layer	utils.py	/^def copy_layer(layer): return layer_from_config(wrap_config(layer))$/;"	f
copy_layers	utils.py	/^def copy_layers(layers): return [copy_layer(layer) for layer in layers]$/;"	f
copy_param	models/convert_torch.py	/^def copy_param(m,n):$/;"	f
copy_weights	utils.py	/^def copy_weights(from_layers, to_layers):$/;"	f
core.py	core.py	1;"	F
create_dl	dataset.py	/^    def create_dl(cls, *args, **kwargs): return cls(DataLoader(*args, **kwargs))$/;"	m	class:ModelDataLoader
create_empty_bcolz	conv_learner.py	/^    def create_empty_bcolz(self, n, name):$/;"	m	class:ConvLearner
create_fc_layer	conv_learner.py	/^    def create_fc_layer(self, ni, nf, p, actn=None):$/;"	m	class:ConvnetBuilder
create_td	nlp.py	/^    def create_td(self, it): return TextDataLoader(it, self.text_fld, self.label_fld)$/;"	m	class:TextData
crop	transforms.py	/^def crop(im, r, c, sz): return im[r:r+sz, c:c+sz]$/;"	f
csv_source	dataset.py	/^def csv_source(folder, csv_file, skip_header=True, suffix='', continuous=False):$/;"	f
cut_model	model.py	/^def cut_model(m, cut): return list(m.children())[:cut]$/;"	f
data	conv_learner.py	/^    def data(self): return self.fc_data if self.precompute else self.data_$/;"	m	class:ConvLearner
data	learner.py	/^    def data(self): return self.data_$/;"	m	class:Learner
dataset	dataset.py	/^    def dataset(self): return self.dl.dataset$/;"	m	class:ModelDataLoader
dataset.py	dataset.py	1;"	F
denorm	dataset.py	/^    def denorm(self,arr):$/;"	m	class:FilesDataset
det_dihedral	transforms.py	/^def det_dihedral(dih): return lambda x: dihedral(dih)$/;"	f
det_lighting	transforms.py	/^def det_lighting(b, c): return lambda x: lighting(x, b, c)$/;"	f
det_rotate	transforms.py	/^def det_rotate(deg): return lambda x: rotate_cv(x, deg)$/;"	f
det_stretch	transforms.py	/^def det_stretch(sr, sc): return lambda x: stretch_cv(x, sr, sc)$/;"	f
det_zoom	transforms.py	/^def det_zoom(zoom): return lambda x: zoom_cv(x, zoom)$/;"	f
dihedral	transforms.py	/^def dihedral(x, dih):$/;"	f
dn121	torch_imports.py	/^def dn121(pre): return children(densenet121(pre))[0]$/;"	f
do_clip	utils.py	/^def do_clip(arr, mx):$/;"	f
do_pad	nlp.py	/^    def do_pad(self, prepend, a):$/;"	m	class:BOW_Dataset
do_transform	transforms.py	/^    def do_transform(self, x): raise NotImplementedError$/;"	m	class:Transform
do_transform	transforms.py	/^    def do_transform(self, x):$/;"	m	class:CenterCropXY
do_transform	transforms.py	/^    def do_transform(self, x):$/;"	m	class:NoCropXY
do_transform	transforms.py	/^    def do_transform(self, x):$/;"	m	class:RandomCropXY
do_transform	transforms.py	/^    def do_transform(self, x):$/;"	m	class:RandomDihedralXY
do_transform	transforms.py	/^    def do_transform(self, x):$/;"	m	class:RandomFlipXY
do_transform	transforms.py	/^    def do_transform(self, x):$/;"	m	class:RandomLightingXY
do_transform	transforms.py	/^    def do_transform(self, x):$/;"	m	class:RandomRotateXY
do_transform	transforms.py	/^    def do_transform(self, x):$/;"	m	class:RandomScaleXY
do_transform	transforms.py	/^    def do_transform(self, x):$/;"	m	class:ScaleXY
do_transform_y	transforms.py	/^    def do_transform_y(self, y):$/;"	m	class:RandomRotateXY
dotprod_nb_learner	nlp.py	/^    def dotprod_nb_learner(self, **kwargs): return self.get_model(DotProdNB, **kwargs)$/;"	m	class:TextClassifierData
draw_tree	structured.py	/^def draw_tree(t, df, size=10, ratio=0.6, precision=0):$/;"	f
dropout_mask	rnn_reg.py	/^def dropout_mask(x, sz, dropout): return x.new(*sz).bernoulli_(1-dropout)\/(1-dropout)$/;"	f
emb_init	column_data.py	/^def emb_init(x):$/;"	f
embedded_dropout	rnn_reg.py	/^def embedded_dropout(embed, words, dropout=0.1, scale=None):$/;"	f
evaluate	model.py	/^    def evaluate(self, xs, y):$/;"	m	class:Stepper
fbeta_torch	losses.py	/^def fbeta_torch(y_true, y_pred, beta, threshold, eps=1e-9):$/;"	f
fit	learner.py	/^    def fit(self, lrs, n_cycle, wds=None, **kwargs):$/;"	m	class:Learner
fit	model.py	/^def fit(model, data, epochs, opt, crit, metrics=None, callbacks=None, **kwargs):$/;"	f
fit_gen	learner.py	/^    def fit_gen(self, model, data, layer_opt, n_cycle, cycle_len=None, cycle_mult=1, cycle_save_name=None,$/;"	m	class:Learner
fix_missing	structured.py	/^def fix_missing(df, col, name, na_dict):$/;"	f
floor	utils.py	/^def floor(x): return int(math.floor(x))$/;"	f
folder_source	dataset.py	/^def folder_source(path, folder):$/;"	f
forward	column_data.py	/^    def forward(self, users, items):$/;"	m	class:EmbeddingDotBias
forward	column_data.py	/^    def forward(self, x_cat, x_cont):$/;"	m	class:MixedInputModel
forward	layers.py	/^    def forward(self, x): return self.f(x)$/;"	m	class:Lambda
forward	layers.py	/^    def forward(self, x): return torch.cat([self.mp(x), self.ap(x)], 1)$/;"	m	class:AdaptiveConcatPool2d
forward	layers.py	/^    def forward(self, x): return x.view(x.size(0), -1)$/;"	m	class:Flatten
forward	lm_rnn.py	/^    def forward(self, input):$/;"	m	class:LinearDecoder
forward	lm_rnn.py	/^    def forward(self, input):$/;"	m	class:LinearRNNOutput
forward	lm_rnn.py	/^    def forward(self, input):$/;"	m	class:MultiBatchRNN
forward	lm_rnn.py	/^    def forward(self, input):$/;"	m	class:PoolingLinearClassifier
forward	lm_rnn.py	/^    def forward(self, input):$/;"	m	class:RNN_Encoder
forward	models/convert_torch.py	/^    def forward(self, input):$/;"	m	class:Lambda
forward	models/convert_torch.py	/^    def forward(self, input):$/;"	m	class:LambdaMap
forward	models/convert_torch.py	/^    def forward(self, input):$/;"	m	class:LambdaReduce
forward	models/inceptionresnetv2.py	/^    def forward(self, x):$/;"	m	class:BasicConv2d
forward	models/inceptionresnetv2.py	/^    def forward(self, x):$/;"	m	class:Block17
forward	models/inceptionresnetv2.py	/^    def forward(self, x):$/;"	m	class:Block35
forward	models/inceptionresnetv2.py	/^    def forward(self, x):$/;"	m	class:Block8
forward	models/inceptionresnetv2.py	/^    def forward(self, x):$/;"	m	class:InceptionResnetV2
forward	models/inceptionresnetv2.py	/^    def forward(self, x):$/;"	m	class:Mixed_5b
forward	models/inceptionresnetv2.py	/^    def forward(self, x):$/;"	m	class:Mixed_6a
forward	models/inceptionresnetv2.py	/^    def forward(self, x):$/;"	m	class:Mixed_7a
forward	models/inceptionv4.py	/^    def forward(self, x):$/;"	m	class:BasicConv2d
forward	models/inceptionv4.py	/^    def forward(self, x):$/;"	m	class:InceptionV4
forward	models/inceptionv4.py	/^    def forward(self, x):$/;"	m	class:Inception_A
forward	models/inceptionv4.py	/^    def forward(self, x):$/;"	m	class:Inception_B
forward	models/inceptionv4.py	/^    def forward(self, x):$/;"	m	class:Inception_C
forward	models/inceptionv4.py	/^    def forward(self, x):$/;"	m	class:Mixed_3a
forward	models/inceptionv4.py	/^    def forward(self, x):$/;"	m	class:Mixed_4a
forward	models/inceptionv4.py	/^    def forward(self, x):$/;"	m	class:Mixed_5a
forward	models/inceptionv4.py	/^    def forward(self, x):$/;"	m	class:Reduction_A
forward	models/inceptionv4.py	/^    def forward(self, x):$/;"	m	class:Reduction_B
forward	models/resnext_101_32x4d.py	/^    def forward(self, input):$/;"	m	class:Lambda
forward	models/resnext_101_32x4d.py	/^    def forward(self, input):$/;"	m	class:LambdaMap
forward	models/resnext_101_32x4d.py	/^    def forward(self, input):$/;"	m	class:LambdaReduce
forward	models/resnext_101_64x4d.py	/^    def forward(self, input):$/;"	m	class:Lambda
forward	models/resnext_101_64x4d.py	/^    def forward(self, input):$/;"	m	class:LambdaMap
forward	models/resnext_101_64x4d.py	/^    def forward(self, input):$/;"	m	class:LambdaReduce
forward	models/resnext_50_32x4d.py	/^    def forward(self, input):$/;"	m	class:Lambda
forward	models/resnext_50_32x4d.py	/^    def forward(self, input):$/;"	m	class:LambdaMap
forward	models/resnext_50_32x4d.py	/^    def forward(self, input):$/;"	m	class:LambdaReduce
forward	models/wrn_50_2f.py	/^    def forward(self, input):$/;"	m	class:Lambda
forward	models/wrn_50_2f.py	/^    def forward(self, input):$/;"	m	class:LambdaMap
forward	models/wrn_50_2f.py	/^    def forward(self, input):$/;"	m	class:LambdaReduce
forward	nlp.py	/^    def forward(self, feat_idx, feat_cnt, sz):$/;"	m	class:DotProdNB
forward	nlp.py	/^    def forward(self, feat_idx, feat_cnt, sz):$/;"	m	class:SimpleNB
forward	rnn_reg.py	/^    def forward(self, *args):$/;"	m	class:WeightDrop
forward	rnn_reg.py	/^    def forward(self, x):$/;"	m	class:LockedDropout
forward_prepare	models/convert_torch.py	/^    def forward_prepare(self, input):$/;"	m	class:LambdaBase
forward_prepare	models/resnext_101_32x4d.py	/^    def forward_prepare(self, input):$/;"	m	class:LambdaBase
forward_prepare	models/resnext_101_64x4d.py	/^    def forward_prepare(self, input):$/;"	m	class:LambdaBase
forward_prepare	models/resnext_50_32x4d.py	/^    def forward_prepare(self, input):$/;"	m	class:LambdaBase
forward_prepare	models/wrn_50_2f.py	/^    def forward_prepare(self, input):$/;"	m	class:LambdaBase
freeze	conv_learner.py	/^    def freeze(self): self.freeze_to(-self.models.n_fc)$/;"	m	class:ConvLearner
freeze_to	learner.py	/^    def freeze_to(self, n):$/;"	m	class:Learner
freeze_to	nlp.py	/^    def freeze_to(self, n):$/;"	m	class:RNN_Learner
from_arrays	dataset.py	/^    def from_arrays(self, path, trn, val, bs=64, tfms=(None,None), classes=None, num_workers=4, test=None):$/;"	m	class:ImageClassifierData
from_bow	nlp.py	/^    def from_bow(cls, trn_bow, trn_y, val_bow, val_y, sl):$/;"	m	class:TextClassifierData
from_csv	column_data.py	/^    def from_csv(self, path, csv, user_name, item_name, rating_name):$/;"	m	class:CollabFilterDataset
from_csv	dataset.py	/^    def from_csv(self, path, folder, csv_fname, bs=64, tfms=(None,None),$/;"	m	class:ImageClassifierData
from_data_frame	column_data.py	/^    def from_data_frame(cls, df, cat_flds, y):$/;"	m	class:ColumnarDataset
from_data_frame	column_data.py	/^    def from_data_frame(self, path, df, user_name, item_name, rating_name):$/;"	m	class:CollabFilterDataset
from_data_frame	column_data.py	/^    def from_data_frame(self, path, val_idxs, df, y, cat_flds, bs):$/;"	m	class:ColumnarModelData
from_data_frames	column_data.py	/^    def from_data_frames(cls, df_cat, df_cont, y):$/;"	m	class:ColumnarDataset
from_data_frames	column_data.py	/^    def from_data_frames(self, path, trn_df, val_df, trn_y, val_y, cat_flds, bs):$/;"	m	class:ColumnarModelData
from_dls	dataset.py	/^    def from_dls(cls, path,trn_dl,val_dl,test_dl=None):$/;"	m	class:ModelData
from_paths	dataset.py	/^    def from_paths(self, path, bs=64, tfms=(None,None), trn_name='train', val_name='val', test_name=None, num_workers=4):$/;"	m	class:ImageClassifierData
from_splits	nlp.py	/^    def from_splits(cls, path, splits, bs, text_name='text', label_name='label'):$/;"	m	class:TextData
get	dataset.py	/^    def get(self, tfm, x, y):$/;"	m	class:BaseDataset
get_activations	conv_learner.py	/^    def get_activations(self, force=False):$/;"	m	class:ConvLearner
get_batch	nlp.py	/^    def get_batch(self, i, seq_len):$/;"	m	class:LanguageModelLoader
get_c	dataset.py	/^    def get_c(self): raise NotImplementedError$/;"	m	class:BaseDataset
get_c	dataset.py	/^    def get_c(self): return int(self.y.max())+1$/;"	m	class:ArraysIndexDataset
get_c	dataset.py	/^    def get_c(self): return int(self.y.max())+1$/;"	m	class:FilesIndexArrayDataset
get_c	dataset.py	/^    def get_c(self): return self.y.shape[1]$/;"	m	class:ArraysNhotDataset
get_c	dataset.py	/^    def get_c(self): return self.y.shape[1]$/;"	m	class:FilesArrayDataset
get_classes	utils.py	/^def get_classes(path):$/;"	f
get_cv_idxs	dataset.py	/^def get_cv_idxs(n, cv_idx=4, val_pct=0.2, seed=42):$/;"	f
get_cycle_end	learner.py	/^    def get_cycle_end(self, name):$/;"	m	class:Learner
get_data	column_data.py	/^    def get_data(self, val_idxs, bs):$/;"	m	class:CollabFilterDataset
get_data	io.py	/^def get_data(url, filename):$/;"	f
get_dl	dataset.py	/^    def get_dl(self, ds, shuffle):$/;"	m	class:ImageData
get_ds	dataset.py	/^    def get_ds(self, fn, trn, val, tfms, test=None, **kwargs):$/;"	m	class:ImageClassifierData
get_emb	column_data.py	/^def get_emb(ni,nf):$/;"	f
get_fc_layers	conv_learner.py	/^    def get_fc_layers(self):$/;"	m	class:ConvnetBuilder
get_language_model	lm_rnn.py	/^def get_language_model(bs, n_tok, emb_sz, nhid, nlayers, pad_token,$/;"	f
get_layer_groups	column_data.py	/^    def get_layer_groups(self): return list(split_by_idxs(self.children,[2]))$/;"	m	class:CollabFilterModel
get_layer_groups	column_data.py	/^    def get_layer_groups(self):$/;"	m	class:StructuredModel
get_layer_groups	conv_learner.py	/^    def get_layer_groups(self):$/;"	m	class:ConvLearner
get_layer_groups	conv_learner.py	/^    def get_layer_groups(self, do_fc=False):$/;"	m	class:ConvnetBuilder
get_layer_groups	learner.py	/^    def get_layer_groups(self): return [self.model]$/;"	m	class:SingleModel
get_layer_groups	learner.py	/^    def get_layer_groups(self): return children(self.model)$/;"	m	class:BasicModel
get_layer_groups	learner.py	/^    def get_layer_groups(self): return self.models.get_layer_groups()$/;"	m	class:Learner
get_layer_groups	nlp.py	/^    def get_layer_groups(self):$/;"	m	class:TextModel
get_layer_opt	learner.py	/^    def get_layer_opt(self, lrs, wds):$/;"	m	class:Learner
get_learner	column_data.py	/^    def get_learner(self, emb_szs, n_cont, emb_drop, out_sz, szs, drops,$/;"	m	class:ColumnarModelData
get_learner	column_data.py	/^    def get_learner(self, n_factors, val_idxs, bs, **kwargs):$/;"	m	class:CollabFilterDataset
get_model	column_data.py	/^    def get_model(self, n_factors):$/;"	m	class:CollabFilterDataset
get_model	nlp.py	/^    def get_model(self, f, **kwargs):$/;"	m	class:TextClassifierData
get_model	nlp.py	/^    def get_model(self, opt_fn, emb_sz, n_hid, n_layers, **kwargs):$/;"	m	class:LanguageModelData
get_model	nlp.py	/^    def get_model(self, opt_fn, max_sl, bptt, emb_sz, n_hid, n_layers, **kwargs):$/;"	m	class:TextData
get_model_path	learner.py	/^    def get_model_path(self, name): return os.path.join(self.models_path,name)+'.h5'$/;"	m	class:Learner
get_n	dataset.py	/^    def get_n(self): raise NotImplementedError$/;"	m	class:BaseDataset
get_n	dataset.py	/^    def get_n(self): return len(self.y)$/;"	m	class:ArraysDataset
get_n	dataset.py	/^    def get_n(self): return len(self.y)$/;"	m	class:FilesDataset
get_nn_mappers	structured.py	/^def get_nn_mappers(df, cat_vars, contin_vars):$/;"	f
get_prediction	model.py	/^def get_prediction(x):$/;"	f
get_rnn_classifer	lm_rnn.py	/^def get_rnn_classifer(max_sl, bptt, bs, n_class, n_tok, emb_sz, n_hid, n_layers, pad_token,$/;"	f
get_sample	structured.py	/^def get_sample(df,n):$/;"	f
get_sz	dataset.py	/^    def get_sz(self): raise NotImplementedError$/;"	m	class:BaseDataset
get_sz	dataset.py	/^    def get_sz(self): return self.transform.sz$/;"	m	class:FilesDataset
get_sz	dataset.py	/^    def get_sz(self): return self.x.shape[1]$/;"	m	class:ArraysDataset
get_x	dataset.py	/^    def get_x(self, i): raise NotImplementedError$/;"	m	class:BaseDataset
get_x	dataset.py	/^    def get_x(self, i):$/;"	m	class:ArraysDataset
get_x	dataset.py	/^    def get_x(self, i):$/;"	m	class:FilesDataset
get_y	dataset.py	/^    def get_y(self, i): raise NotImplementedError$/;"	m	class:BaseDataset
get_y	dataset.py	/^    def get_y(self, i): return self.y[i]$/;"	m	class:FilesArrayDataset
get_y	dataset.py	/^    def get_y(self, i):$/;"	m	class:ArraysDataset
gray	utils.py	/^def gray(img): return np.rollaxis(img, 0, 1).dot(to_bw)$/;"	f
help	models/convert_torch.py	/^                    help='output file name prefix, xxx.py xxx.pth')$/;"	v
help	models/convert_torch.py	/^                    help='torch model file in t7 format')$/;"	v
image_gen	transforms.py	/^def image_gen(normalizer, denorm, sz, tfms=None, max_zoom=None, pad=0, crop_type=None, tfm_y=None):$/;"	f
imagenet_mean	transforms.py	/^imagenet_mean = np.array([103.939, 116.779, 123.68], dtype=np.float32).reshape((1,1,3))$/;"	v
imagenet_stats	dataset.py	/^imagenet_stats = ([0.485, 0.456, 0.406], [0.229, 0.224, 0.225])$/;"	v
imports.py	imports.py	1;"	F
in_notebook	imports.py	/^def in_notebook(): return 'ipykernel' in sys.modules$/;"	f
inception_4	torch_imports.py	/^def inception_4(pre):$/;"	f
inception_models	dataset.py	/^inception_models = (inception_4, inceptionresnet_2)$/;"	v
inception_stats	dataset.py	/^inception_stats = ([0.5, 0.5, 0.5], [0.5, 0.5, 0.5])$/;"	v
inceptionresnet_2	torch_imports.py	/^def inceptionresnet_2(pre): return load_pre(pre, InceptionResnetV2, 'inceptionresnetv2-d579a627')$/;"	f
inceptionresnetv2	models/inceptionresnetv2.py	/^def inceptionresnetv2(pretrained=True):$/;"	f
inceptionresnetv2.py	models/inceptionresnetv2.py	1;"	F
inceptionv4	models/inceptionv4.py	/^def inceptionv4(pretrained=True):$/;"	f
inceptionv4.py	models/inceptionv4.py	1;"	F
initializers.py	initializers.py	1;"	F
initrange	lm_rnn.py	/^    initrange=0.1$/;"	v	class:LinearRNNOutput
initrange	lm_rnn.py	/^    initrange=0.1$/;"	v	class:RNN_Encoder
io.py	io.py	1;"	F
is_date	structured.py	/^def is_date(x): return np.issubdtype(x.dtype, np.datetime64)$/;"	f
is_multi	dataset.py	/^    def is_multi(self): return False$/;"	m	class:BaseDataset
is_multi	dataset.py	/^    def is_multi(self): return True$/;"	m	class:ArraysNhotDataset
is_multi	dataset.py	/^    def is_multi(self): return True$/;"	m	class:FilesNhotArrayDataset
is_multi	dataset.py	/^    def is_multi(self): return self.trn_dl.dataset.is_multi$/;"	m	class:ImageClassifierData
is_reg	dataset.py	/^    def is_reg(self): return False$/;"	m	class:BaseDataset
is_reg	dataset.py	/^    def is_reg(self): return True$/;"	m	class:FilesIndexArrayRegressionDataset
is_reg	dataset.py	/^    def is_reg(self): return self.trn_ds.is_reg$/;"	m	class:ModelData
layer_optimizer.py	layer_optimizer.py	1;"	F
layers.py	layers.py	1;"	F
learner.py	learner.py	1;"	F
lighting	transforms.py	/^def lighting(im, b, c):$/;"	f
limit_mem	utils.py	/^def limit_mem():$/;"	f
lm_rnn.py	lm_rnn.py	1;"	F
load	learner.py	/^    def load(self, name): load_model(self.model, self.get_model_path(name))$/;"	m	class:Learner
load	models/inceptionresnetv2.py	/^def load():$/;"	f
load	models/inceptionv4.py	/^def load():$/;"	f
load_array	utils.py	/^def load_array(fname): return bcolz.open(fname)[:]$/;"	f
load_block17	models/inceptionresnetv2.py	/^def load_block17(state_dict, name_pth, name_tf):$/;"	f
load_block35	models/inceptionresnetv2.py	/^def load_block35(state_dict, name_pth, name_tf):$/;"	f
load_block8	models/inceptionresnetv2.py	/^def load_block8(state_dict, name_pth, name_tf):$/;"	f
load_conv2d	models/inceptionresnetv2.py	/^def load_conv2d(state_dict, name_pth, name_tf):$/;"	f
load_conv2d	models/inceptionv4.py	/^def load_conv2d(state_dict, name_pth, name_tf):$/;"	f
load_conv2d_nobn	models/inceptionresnetv2.py	/^def load_conv2d_nobn(state_dict, name_pth, name_tf):$/;"	f
load_cycle	learner.py	/^    def load_cycle(self, name, cycle): self.load(f'{name}_cyc_{cycle}')$/;"	m	class:Learner
load_encoder	nlp.py	/^    def load_encoder(self, name): load_model(self.model[0], self.get_model_path(name))$/;"	m	class:RNN_Learner
load_linear	models/inceptionresnetv2.py	/^def load_linear(state_dict, name_pth, name_tf):$/;"	f
load_linear	models/inceptionv4.py	/^def load_linear(state_dict, name_pth, name_tf):$/;"	f
load_mixed_4a_7a	models/inceptionv4.py	/^def load_mixed_4a_7a(state_dict, name_pth, name_tf):$/;"	f
load_mixed_5	models/inceptionv4.py	/^def load_mixed_5(state_dict, name_pth, name_tf):$/;"	f
load_mixed_5b	models/inceptionresnetv2.py	/^def load_mixed_5b(state_dict, name_pth, name_tf):$/;"	f
load_mixed_6	models/inceptionv4.py	/^def load_mixed_6(state_dict, name_pth, name_tf):$/;"	f
load_mixed_6a	models/inceptionresnetv2.py	/^def load_mixed_6a(state_dict, name_pth, name_tf):$/;"	f
load_mixed_7	models/inceptionv4.py	/^def load_mixed_7(state_dict, name_pth, name_tf):$/;"	f
load_mixed_7a	models/inceptionresnetv2.py	/^def load_mixed_7a(state_dict, name_pth, name_tf):$/;"	f
load_model	torch_imports.py	/^def load_model(m, p): m.load_state_dict(torch.load(p))$/;"	f
load_pre	torch_imports.py	/^def load_pre(pre, f, fn):$/;"	f
losses.py	losses.py	1;"	F
lr	layer_optimizer.py	/^    def lr(self): return self.lrs[-1]$/;"	m	class:LayerOptimizer
lr_find	learner.py	/^    def lr_find(self, start_lr=1e-5, end_lr=10, wds=None):$/;"	m	class:Learner
lua_recursive_model	models/convert_torch.py	/^def lua_recursive_model(module,seq):$/;"	f
lua_recursive_source	models/convert_torch.py	/^def lua_recursive_source(module):$/;"	f
metrics.py	metrics.py	1;"	F
model	conv_learner.py	/^    def model(self): return self.models.fc_model if self.precompute else self.models.model$/;"	m	class:ConvLearner
model	learner.py	/^    def model(self): return self.models.model$/;"	m	class:Learner
model.py	model.py	1;"	F
model_meta	conv_learner.py	/^    model_meta = {$/;"	v	class:ConvnetBuilder
model_urls	models/inceptionresnetv2.py	/^model_urls = {$/;"	v
model_urls	models/inceptionv4.py	/^model_urls = {$/;"	v
n	models/convert_torch.py	/^    n = nn.Sequential()$/;"	v
n_hot	dataset.py	/^def n_hot(ids, c):$/;"	f
name	conv_learner.py	/^    def name(self): return f'{self.f.__name__}_{self.xtra_cut}'$/;"	m	class:ConvnetBuilder
nb_learner	nlp.py	/^    def nb_learner(self, **kwargs): return self.get_model(SimpleNB, **kwargs)$/;"	m	class:TextClassifierData
next	utils.py	/^    def next(self, *args, **kwargs):$/;"	m	class:MixIterator
nhot_labels	dataset.py	/^def nhot_labels(label2idx, csv_labels, fnames, c):$/;"	f
nlp.py	nlp.py	1;"	F
no_crop	transforms.py	/^def no_crop(im, min_sz=None):$/;"	f
noop	core.py	/^def noop(*args, **kwargs): return$/;"	f
noop	transforms.py	/^def noop(x): return x$/;"	f
num_features	learner.py	/^    def num_features(self): return num_features(self.model)$/;"	m	class:Learner
num_features	model.py	/^def num_features(m):$/;"	f
numericalize	structured.py	/^def numericalize(df, col, name, max_n_cat):$/;"	f
on_batch_end	sgdr.py	/^    def on_batch_end(self, loss):$/;"	m	class:LR_Finder
on_batch_end	sgdr.py	/^    def on_batch_end(self, loss):$/;"	m	class:LR_Updater
on_batch_end	sgdr.py	/^    def on_batch_end(self, loss):$/;"	m	class:LossRecorder
on_batch_end	sgdr.py	/^    def on_batch_end(self, metrics): pass$/;"	m	class:Callback
on_epoch_end	sgdr.py	/^    def on_epoch_end(self, metrics): pass$/;"	m	class:Callback
on_epoch_end	sgdr.py	/^    def on_epoch_end(self, metrics):$/;"	m	class:LossRecorder
on_train_begin	sgdr.py	/^    def on_train_begin(self):$/;"	m	class:CosAnneal
on_train_begin	sgdr.py	/^    def on_train_begin(self):$/;"	m	class:LR_Finder
on_train_begin	sgdr.py	/^    def on_train_begin(self):$/;"	m	class:LR_Updater
on_train_begin	sgdr.py	/^    def on_train_begin(self):$/;"	m	class:LossRecorder
on_train_begin	sgdr.py	/^    def on_train_begin(self, opt): pass$/;"	m	class:Callback
one_hidden	lm_rnn.py	/^    def one_hidden(self, l):$/;"	m	class:RNN_Encoder
one_hot	core.py	/^def one_hot(a,c): return np.eye(c)[a]$/;"	f
opt_params	layer_optimizer.py	/^    def opt_params(self):$/;"	m	class:LayerOptimizer
opt_params	layer_optimizer.py	/^def opt_params(parm, lr, wd):$/;"	f
pad_row	nlp.py	/^    def pad_row(self, row):$/;"	m	class:BOW_Dataset
parallel_trees	structured.py	/^def parallel_trees(m, fn, n_jobs=8):$/;"	f
parse_csv_labels	dataset.py	/^def parse_csv_labels(fn, skip_header=True):$/;"	f
parser	models/convert_torch.py	/^parser = argparse.ArgumentParser(description='Convert torch t7 model to pytorch')$/;"	v
plot	sgdr.py	/^    def plot(self, n_skip=10):$/;"	m	class:LR_Finder
plot	utils.py	/^def plot(img): plt.imshow(to_plot(img))$/;"	f
plot_confusion_matrix	plots.py	/^def plot_confusion_matrix(cm, classes, normalize=False, title='Confusion matrix',$/;"	f
plot_loss	sgdr.py	/^    def plot_loss(self):$/;"	m	class:LossRecorder
plot_lr	sgdr.py	/^    def plot_lr(self):$/;"	m	class:LossRecorder
plots	plots.py	/^def plots(ims, figsize=(12,6), rows=1, interp=False, titles=None, maintitle=None):$/;"	f
plots	utils.py	/^def plots(ims, figsize=(12,6), rows=1, interp=False, titles=None):$/;"	f
plots.py	plots.py	1;"	F
plots_from_files	plots.py	/^def plots_from_files(imspaths, figsize=(10,5), rows=1, titles=None, maintitle=None):$/;"	f
pool	lm_rnn.py	/^    def pool(self, x, bs, is_max):$/;"	m	class:PoolingLinearClassifier
predict	learner.py	/^    def predict(self, is_test=False): return self.predict_with_targs(is_test)[0]$/;"	m	class:Learner
predict	model.py	/^def predict(m, dl): return predict_with_targs(m, dl)[0]$/;"	f
predict_to_bcolz	model.py	/^def predict_to_bcolz(m, gen, arr, workers=4):$/;"	f
predict_with_targs	learner.py	/^    def predict_with_targs(self, is_test=False):$/;"	m	class:Learner
predict_with_targs	model.py	/^def predict_with_targs(m, dl):$/;"	f
preprocess_imagenet	transforms.py	/^def preprocess_imagenet(x): return x[..., ::-1] - imagenet_mean$/;"	f
preprocess_scale	transforms.py	/^def preprocess_scale(x): return ((x\/255.)-0.5)*2$/;"	f
pretrained	conv_learner.py	/^    def pretrained(self, f, data, ps=None, xtra_fc=None, xtra_cut=0, **kwargs):$/;"	m	class:ConvLearner
proc_col	column_data.py	/^    def proc_col(self,col):$/;"	m	class:CollabFilterDataset
proc_df	structured.py	/^def proc_df(df, y_fld, skip_flds=None, do_scale=False, na_dict=None,$/;"	f
r	nlp.py	/^    def r(self):$/;"	m	class:TextClassifierData
rand0	transforms.py	/^def rand0(s): return random.random()*(s*2)-s$/;"	f
random_px_rect	transforms.py	/^def random_px_rect(y, x):$/;"	f
re_br	nlp.py	/^re_br = re.compile('<br \/>')$/;"	v
re_tok	nlp.py	/^re_tok = re.compile(f'([{string.punctuation}“”¨«»®´·º½¾¿¡§£₤‘’])')$/;"	v
read_dir	dataset.py	/^def read_dir(path, folder):$/;"	f
read_dirs	dataset.py	/^def read_dirs(path, folder):$/;"	f
repackage_var	lm_rnn.py	/^def repackage_var(h):$/;"	f
reset	lm_rnn.py	/^    def reset(self):$/;"	m	class:RNN_Encoder
reset	lm_rnn.py	/^    def reset(self):$/;"	m	class:SequentialRNN
reset	model.py	/^    def reset(self, train=True):$/;"	m	class:Stepper
reset	utils.py	/^    def reset(self):$/;"	m	class:MixIterator
reset_rf_samples	structured.py	/^def reset_rf_samples():$/;"	f
resize	dataset.py	/^    def resize(self, targ, new_path):$/;"	m	class:ImageData
resize_img	dataset.py	/^def resize_img(fname, targ, path, new_path):$/;"	f
resize_imgs	dataset.py	/^    def resize_imgs(self, targ, new_path):$/;"	m	class:FilesDataset
resize_imgs	dataset.py	/^def resize_imgs(fnames, targ, path, new_path):$/;"	f
resized	dataset.py	/^    def resized(self, dl, targ, new_path):$/;"	m	class:ImageData
resnext101	torch_imports.py	/^def resnext101(pre): return load_pre(pre, resnext_101_32x4d, 'resnext_101_32x4d')$/;"	f
resnext101_64	torch_imports.py	/^def resnext101_64(pre): return load_pre(pre, resnext_101_64x4d, 'resnext_101_64x4d')$/;"	f
resnext50	torch_imports.py	/^def resnext50(pre): return load_pre(pre, resnext_50_32x4d, 'resnext_50_32x4d')$/;"	f
resnext_101_32x4d	models/resnext_101_32x4d.py	/^def resnext_101_32x4d(): return nn.Sequential( # Sequential,$/;"	f
resnext_101_32x4d.py	models/resnext_101_32x4d.py	1;"	F
resnext_101_64x4d	models/resnext_101_64x4d.py	/^def resnext_101_64x4d(): return nn.Sequential( # Sequential,$/;"	f
resnext_101_64x4d.py	models/resnext_101_64x4d.py	1;"	F
resnext_50_32x4d	models/resnext_50_32x4d.py	/^def resnext_50_32x4d(): return nn.Sequential( # Sequential,$/;"	f
resnext_50_32x4d.py	models/resnext_50_32x4d.py	1;"	F
rf_feat_importance	structured.py	/^def rf_feat_importance(m, df):$/;"	f
rnn_reg.py	rnn_reg.py	1;"	F
rnn_train.py	rnn_train.py	1;"	F
rotate_cv	transforms.py	/^def rotate_cv(img, deg, mode=cv2.BORDER_REFLECT, flags=cv2.INTER_LINEAR):$/;"	f
save	learner.py	/^    def save(self, name): save_model(self.model, self.get_model_path(name))$/;"	m	class:Learner
save_array	utils.py	/^def save_array(fname, arr):$/;"	f
save_cycle	learner.py	/^    def save_cycle(self, name, cycle): self.save(f'{name}_cyc_{cycle}')$/;"	m	class:Learner
save_encoder	nlp.py	/^    def save_encoder(self, name): save_model(self.model[0], self.get_model_path(name))$/;"	m	class:RNN_Learner
save_fc1	conv_learner.py	/^    def save_fc1(self):$/;"	m	class:ConvLearner
save_model	torch_imports.py	/^def save_model(m, p): torch.save(m.state_dict(), p)$/;"	f
scale_min	transforms.py	/^def scale_min(im, targ):$/;"	f
scale_to	transforms.py	/^def scale_to(x, ratio, targ): return max(math.floor(x*ratio), targ)$/;"	f
scale_vars	structured.py	/^def scale_vars(df):$/;"	f
seq2seq_reg	lm_rnn.py	/^def seq2seq_reg(output, xtra, loss, alpha=0, beta=0):$/;"	f
set_data	conv_learner.py	/^    def set_data(self, data):$/;"	m	class:ConvLearner
set_data	learner.py	/^    def set_data(self, data): self.data_ = data$/;"	m	class:Learner
set_lrs	layer_optimizer.py	/^    def set_lrs(self, lrs):$/;"	m	class:LayerOptimizer
set_lrs	layer_optimizer.py	/^def set_lrs(opt, lrs):$/;"	f
set_plot_sizes	structured.py	/^def set_plot_sizes(sml, med, big):$/;"	f
set_rf_samples	structured.py	/^def set_rf_samples(n):$/;"	f
set_state	transforms.py	/^    def set_state(self):$/;"	m	class:CenterCropXY
set_state	transforms.py	/^    def set_state(self):$/;"	m	class:NoCropXY
set_state	transforms.py	/^    def set_state(self):$/;"	m	class:RandomCropXY
set_state	transforms.py	/^    def set_state(self):$/;"	m	class:RandomDihedralXY
set_state	transforms.py	/^    def set_state(self):$/;"	m	class:RandomFlipXY
set_state	transforms.py	/^    def set_state(self):$/;"	m	class:RandomLightingXY
set_state	transforms.py	/^    def set_state(self):$/;"	m	class:RandomRotateXY
set_state	transforms.py	/^    def set_state(self):$/;"	m	class:RandomScaleXY
set_state	transforms.py	/^    def set_state(self):$/;"	m	class:ScaleXY
set_train_mode	model.py	/^def set_train_mode(m):$/;"	f
set_trainable	core.py	/^def set_trainable(l, b):$/;"	f
set_trainable_attr	core.py	/^def set_trainable_attr(m,b):$/;"	f
sgdr.py	sgdr.py	1;"	F
simplify_source	models/convert_torch.py	/^def simplify_source(s):$/;"	f
spacy_en	nlp.py	/^spacy_en = spacy.load('en')$/;"	v
spacy_tok	nlp.py	/^def spacy_tok(x): return [tok.text for tok in spacy_en.tokenizer(sub_br(x))]$/;"	f
split_by_idx	dataset.py	/^def split_by_idx(idxs, *a):$/;"	f
split_by_idxs	core.py	/^def split_by_idxs(seq, idxs):$/;"	f
step	model.py	/^    def step(self, xs, y):$/;"	m	class:Stepper
stretch_cv	transforms.py	/^def stretch_cv(x,sr,sc):$/;"	f
structured.py	structured.py	1;"	F
sub_br	nlp.py	/^def sub_br(x): return re_br.sub("\\n", x)$/;"	f
sum_geom	core.py	/^def sum_geom(a,r,n):$/;"	f
sz	dataset.py	/^    def sz(self): return self.trn_ds.sz$/;"	m	class:ImageData
test	models/inceptionresnetv2.py	/^def test(model):$/;"	f
test	models/inceptionv4.py	/^def test(model):$/;"	f
test_block17	models/inceptionresnetv2.py	/^def test_block17(module, name):$/;"	f
test_block35	models/inceptionresnetv2.py	/^def test_block35(module, name):$/;"	f
test_block8	models/inceptionresnetv2.py	/^def test_block8(module, name):$/;"	f
test_conv2d	models/inceptionresnetv2.py	/^def test_conv2d(module, name):$/;"	f
test_conv2d	models/inceptionv4.py	/^def test_conv2d(module, name):$/;"	f
test_conv2d_nobn	models/inceptionresnetv2.py	/^def test_conv2d_nobn(module, name):$/;"	f
test_dist	models/inceptionresnetv2.py	/^    def test_dist(self, input, output):$/;"	f	function:test_conv2d_nobn
test_dist	models/inceptionv4.py	/^    def test_dist(self, input, output):$/;"	f	function:test_conv2d
test_dist_conv	models/inceptionresnetv2.py	/^    def test_dist_conv(self, input, output):$/;"	f	function:test_conv2d
test_dist_relu	models/inceptionresnetv2.py	/^    def test_dist_relu(self, input, output):$/;"	f	function:test_conv2d
test_mixed_4a_7a	models/inceptionv4.py	/^def test_mixed_4a_7a(module, name):$/;"	f
test_mixed_5b	models/inceptionresnetv2.py	/^def test_mixed_5b(module, name):$/;"	f
test_mixed_6a	models/inceptionresnetv2.py	/^def test_mixed_6a(module, name):$/;"	f
test_mixed_7a	models/inceptionresnetv2.py	/^def test_mixed_7a(module, name):$/;"	f
texts_from_files	nlp.py	/^def texts_from_files(src, names):$/;"	f
texts_from_folders	nlp.py	/^def texts_from_folders(src, names):$/;"	f
tfms_from_model	dataset.py	/^def tfms_from_model(f_model, sz, aug_tfms=[], max_zoom=None, pad=0, crop_type=None, tfm_y=None):$/;"	f
tnrange	imports.py	/^    tnrange=trange$/;"	v
to_bb	transforms.py	/^def to_bb(YY, y):$/;"	f
to_bw	utils.py	/^to_bw = np.array([0.299, 0.587, 0.114])$/;"	v
to_np	core.py	/^def to_np(v):$/;"	f
to_plot	utils.py	/^def to_plot(img): return np.rollaxis(img, 0, 1).astype(np.uint8)$/;"	f
tokenize	nlp.py	/^def tokenize(s): return re_tok.sub(r' \\1 ', s).split()$/;"	f
torch_imports.py	torch_imports.py	1;"	F
torch_to_pytorch	models/convert_torch.py	/^def torch_to_pytorch(t7_filename,outputname=None):$/;"	f
tqdm	imports.py	/^    def tqdm(*args, **kwargs): return tq.tqdm(*args, file=sys.stdout, **kwargs)$/;"	f	function:in_notebook
tqdm_notebook	imports.py	/^    tqdm_notebook=tqdm$/;"	v
train_cats	structured.py	/^def train_cats(df):$/;"	f
trainable_params_	core.py	/^def trainable_params_(m):$/;"	f
trange	imports.py	/^    def trange(*args, **kwargs): return tq.trange(*args, file=sys.stdout, **kwargs)$/;"	f	function:in_notebook
transform	transforms.py	/^    def transform(self, x, y=None):$/;"	m	class:Transform
transform_coord	transforms.py	/^    def transform_coord(self, x, y): return self.transform(x),y$/;"	m	class:Transform
transform_coord	transforms.py	/^    def transform_coord(self, x, y):$/;"	m	class:CoordTransform
transform_coord	transforms.py	/^    def transform_coord(self, x, y):$/;"	m	class:RandomRotateXY
transforms.py	transforms.py	1;"	F
transforms_basic	transforms.py	/^transforms_basic    = [RandomRotateXY(10), RandomLightingXY(0.05, 0.05)]$/;"	v
transforms_side_on	transforms.py	/^transforms_side_on  = transforms_basic + [RandomFlipXY()]$/;"	v
transforms_top_down	transforms.py	/^transforms_top_down = transforms_basic + [RandomDihedralXY()]$/;"	v
trn_ds	dataset.py	/^    def trn_ds(self): return self.trn_dl.dataset$/;"	m	class:ModelData
trn_y	dataset.py	/^    def trn_y(self): return self.trn_ds.y$/;"	m	class:ModelData
unfreeze	learner.py	/^    def unfreeze(self): self.freeze_to(0)$/;"	m	class:Learner
update_lr	sgdr.py	/^    def update_lr(self):$/;"	m	class:LR_Updater
update_to	io.py	/^    def update_to(self, b=1, bsize=1, tsize=None):$/;"	m	class:TqdmUpTo
utils.py	utils.py	1;"	F
val_ds	dataset.py	/^    def val_ds(self): return self.val_dl.dataset$/;"	m	class:ModelData
val_y	dataset.py	/^    def val_y(self): return self.val_ds.y$/;"	m	class:ModelData
validate	model.py	/^def validate(stepper, dl, metrics):$/;"	f
varname	models/convert_torch.py	/^    varname = t7_filename.replace('.t7','').replace('.','_').replace('-','_')$/;"	v
wrap_config	utils.py	/^def wrap_config(layer):$/;"	f
wrn	torch_imports.py	/^def wrn(pre): return load_pre(pre, wrn_50_2f, 'wrn_50_2f')$/;"	f
wrn_50_2f	models/wrn_50_2f.py	/^def wrn_50_2f(): return nn.Sequential( # Sequential,$/;"	f
wrn_50_2f.py	models/wrn_50_2f.py	1;"	F
zoom_cv	transforms.py	/^def zoom_cv(x,z):$/;"	f
